import { Injectable } from '@angular/core';
import { fromEvent } from 'rxjs';
import { map, bufferTime } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class RegistrationToolService {
  private inputBuffer: string = '';
  private lastTimestamp: number | null = null;
  private readonly speedThreshold = 30; // Threshold in ms to detect scanner input
  private readonly idleThreshold = 100; // Threshold in ms to finalize the scanner input

  constructor() {
    this.startListening();
  }

  private startListening() {
    fromEvent<KeyboardEvent>(document, 'keydown')
      .pipe(
        map(event => ({
          key: event.key,
          timestamp: event.timeStamp
        })),
        bufferTime(10) // Process events in small batches for efficiency
      )
      .subscribe(events => this.handleKeys(events));
  }

  private handleKeys(events: { key: string; timestamp: number }[]) {
    events.forEach(event => {
      if (this.lastTimestamp) {
        const timeDifference = event.timestamp - this.lastTimestamp;

        if (timeDifference > this.idleThreshold) {
          // If the time difference exceeds idleThreshold, finalize the previous input
          if (this.inputBuffer) {
            this.handleCompleteInput(this.inputBuffer);
            this.inputBuffer = ''; // Reset the buffer for the next input sequence
          }
        }

        if (timeDifference < this.speedThreshold) {
          // If the time difference is within the speed threshold, it's likely scanner input
          this.inputBuffer += event.key;
        } else {
          // If the time difference exceeds speedThreshold but is within idleThreshold, finalize input
          if (this.inputBuffer) {
            this.handleCompleteInput(this.inputBuffer);
            this.inputBuffer = ''; // Reset the buffer for the next input sequence
          }
          this.inputBuffer += event.key; // Start a new buffer sequence with the current key
        }
      } else {
        // First key press, start the buffer
        this.inputBuffer += event.key;
      }

      this.lastTimestamp = event.timestamp; // Update the last timestamp
    });
  }

  private handleCompleteInput(input: string) {
    console.log('Scanner input detected:', input);
    // Implement your logic to handle the complete scanner input here
    this.processScannerInput(input);
  }

  private processScannerInput(input: string) {
    // Add your scanner input processing logic here
    console.log('Processing scanner input:', input);
  }
}